package com.xuyazhou.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xuyazhou.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table user.
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Index_id = new Property(0, String.class, "index_id", true, "INDEX_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Bio = new Property(3, String.class, "bio", false, "BIO");
        public final static Property Website = new Property(4, String.class, "website", false, "WEBSITE");
        public final static Property Profile_picture = new Property(5, String.class, "profile_picture", false, "PROFILE_PICTURE");
        public final static Property Full_name = new Property(6, String.class, "full_name", false, "FULL_NAME");
        public final static Property Access_token = new Property(7, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Result = new Property(8, String.class, "result", false, "RESULT");
    };


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'user' (" + //
                "'INDEX_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: index_id
                "'ID' TEXT," + // 1: id
                "'USERNAME' TEXT," + // 2: username
                "'BIO' TEXT," + // 3: bio
                "'WEBSITE' TEXT," + // 4: website
                "'PROFILE_PICTURE' TEXT," + // 5: profile_picture
                "'FULL_NAME' TEXT," + // 6: full_name
                "'ACCESS_TOKEN' TEXT," + // 7: access_token
                "'RESULT' TEXT);"); // 8: result
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_user_INDEX_ID ON user" +
                " (INDEX_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String index_id = entity.getIndex_id();
        if (index_id != null) {
            stmt.bindString(1, index_id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(4, bio);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(5, website);
        }
 
        String profile_picture = entity.getProfile_picture();
        if (profile_picture != null) {
            stmt.bindString(6, profile_picture);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(7, full_name);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(8, access_token);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(9, result);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // index_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bio
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // website
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profile_picture
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // full_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // access_token
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // result
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setIndex_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBio(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWebsite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfile_picture(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFull_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccess_token(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setResult(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getIndex_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getIndex_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
